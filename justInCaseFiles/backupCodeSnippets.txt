function startGame(){
    // gameWindow.start();
    const pc = newPlayableCharacter(100, 100);
}

// let gameWindow = {
//     canvas: document.getElementById('game-window'),
//     start: function(){
//         // the getContext('2d) object has properties and methods for
//         //drawing on the canvas. Helpful for games.
//         this.context = this.canvas.getContext('2d');
//     }
// }

// taken from web-game activity
//Collects URL of image, creates img, makes src the url,
//positions image as absolute, and appends it the body

function move(element) {
    element.style.position = 'fixed'

    function moveToCoordinates(left, bottom) {
        element.style.left = left + 'px'
        element.style.bottom = bottom + 'px'
    }

    function moveWithArrowKeys(left, bottom, callback){
        let direction = null; //direction has to be null? So it can change?
        let x = left; //current position for thing
        let y = bottom;

        element.style.left = x + 'px'
        element.style.bottom = y + 'px'

        // Function to move the element
        function moveCharacter(){
            if(direction === 'west'){
                x-=1
            }

            if(direction === 'north'){
                y+=1
            }

            if(direction === 'east'){
                x+=1
            }

            if(direction === 'south'){
                y-=1
            }
            element.style.left = x + 'px'
            element.style.bottom = y + 'px'
        }
        //calls move function every millisecond
        setInterval(moveCharacter, 1)

        // Click arrow keys for movement! "e" needed for checking
        //which key was pressed. When keys are pressed, element moves.
        document.addEventListener('keydown', function(e){
            //let user hold down key to keep movement happening
            if(e.repeat) return;

            if(e.key === 'ArrowLeft'){
                direction = 'west'
            }
            if(e.key === 'ArrowUp'){
                direction = 'north'
            }
            if(e.key === 'ArrowRight'){
                direction = 'east'
            }
            if(e.key === 'ArrowDown'){
                direction = 'south'
            }
            callback(direction)
        })

        // When no keys are pressed, the thing
        //stays still
        document.addEventListener('keyup', function(e){
            direction = null
            callback(direction)
        })
    }

    return {
        to: moveToCoordinates,
        withArrowKeys: moveWithArrowKeys
    }
}

const character = newImage('imgs/game-imgs/ANTS/ant-static-south.png')

//changes character appearance based on direction. 
//Direction parameter needed to connect scope to move function
//in move.js
function handleDirectionChange(direction){
    //null for no chosen direction
    if(direction === null){
        character.src = 'imgs/game-imgs/ANTS/ant-static-south.png'
    }
    if(direction === 'west'){
        character.src = 'imgs/game-imgs/ANTS/ant-walk-west.gif'
    }
    if(direction === 'north'){
        character.src = 'imgs/game-imgs/ANTS/ant-walk-north.gif'
    }
    if(direction === 'east'){
        character.src = 'imgs/game-imgs/ANTS/ant-walk-east.gif'
    }
    if(direction === 'south'){
        character.src = 'imgs/game-imgs/ANTS/ant-walk-south.gif'
    }
}


move(character).withArrowKeys(100, 250, handleDirectionChange)

------------------
// TESTING
// const character = newImage('imgs/game-imgs/ANTS/ant-walk-west.gif')
// let direction = null;
// let x = 100;
// let y = 250;

// //Function to move Player Ant
// setInterval(function() {
//     if(direction === 'west'){
//         x = x - 1
//     }
//     if(direction === 'east'){
//         x = x + 1
//     }
//     if(direction === 'north'){
//         y = y + 1
//     }
//     if(direction === 'south'){
//         y = y - 1
//     }
//     character.style.left = x + 'px'
//     character.style.bottom = y + 'px'
// }, 1)


------------------ENEMIES

// Format taken from Franks Laboratory
//https://www.youtube.com/watch?v=GXvNEwu9cgM&t=10s
class Enemy {
    constructor(x, y, width, height, speed, type){
        //x position on canvas
        this.x = x;
        //y position on canvas
        this.y = y;
        this.width = width;
        this.height = height;
        this.speed = speed;
        //spider, beetle, what else
        this.type = type;
    }
    //draws enemy bases
    draw(){
        ctx1.fillStyle = 'blue';
        ctx1.fillRect(this.x, this.y, this.width, this.height);
    }
    update(){
        //makes enemies move
        this.x += this.speed * gameSpeed;
        //once object goes off the screen, it'll come back
        //on the other side
        if(this.speed > 0){
            //extra this.width adds more time before enemy
            //appears again
            if(this.x > canvas.width + this.width){
                this.x = 0 - this.width;
            }
        } else {
            if(this.x < 0 - this.width){
                this.x = canvas.width + this.width
            }
        }
    }

}

function initEnemies(){
    for(let i = 0; i < 2; i++){
        let x = i * 350;
        enemyArray.push(new Enemy(x, canvas.height - grid * 2 - 20, grid * 2, grid, 1, 'spider'));

    }
}

initEnemies();

//cycles through enemy array
function handleEnemies(){
    for(let i = 0; i < enemyArray.length; i++){
        enemyArray[i].update();
        enemyArray[i].draw();
    }
}

---------------------
MAYBE MOVEMENT???

window.addEventListener('keydown', function(e){
    keys = [];
    //keyCode is old and should be changed to something else? key?
    //when key is pressed, it gets added to key array
    keys[e.keyCode] = true;
    //uses "or" operator so if any arrow key is pressed,
    //then antPC.move() function will be called
    if(keys[37] || keys[38] || keys[39] || 40){
        antPC.move();
        console.log('test')
    }
    
});

window.addEventListener('keyup', function(e){
    //keys should get deleted after being pressed so they 
    //aren't firing at the same time
    delete keys[e.keyCode];
    antPC.moving = false;
})

//moves ant
    move(){
        
        //up arrow key
        if(keys[38]){
            if(this.moving === false){
                this.y -= 0.7;
                this.moving = true;
            }
        }

        //down
        if(keys[40]){
            if(this.moving === false && this.y < canvas.height - this.height * 2){
                this.y += 0.7;
                this.moving = true;
                } 
            }

        //left
        if(keys[37]){
            if(this.moving === false && this.x > this.width){
                this.x -= 0.7;
                this.moving = true;
                } 
            }

        //right
        if(keys[39]){
            if(this.moving === false && this.x < canvas.width - this.width * 2){
                this.x += 0.7;
                this.moving = true;
                } 
            }

    }


        <!-- Added Proggy Clean font -->
    <!-- https://www.cdnfonts.com/proggy-clean.font -->
    <link href="http://fonts.cdnfonts.com/css/proggy-clean" rel="stylesheet">